# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_waves.ipynb.

# %% auto 0
__all__ = ['Wave', 'Pulse', 'Sound']

# %% ../nbs/01_waves.ipynb 14
class Wave(np.array):
    def __init__(self, data, rate=44_100):
        super().__init__(data, np.float32)

    def show(self, n_period=5, ax=None):
        ax = ifnone(ax, plt.subplots()[1])
        d = self.data if n_period is None else self.data[:n_period*self.rate//self.freq]
        ax.plot(d)
    def save(self,fname): wf.write(fname, self.rate, self)
    


class Wave:
    def __init__(self, freq, seconds=1, rate=44_100, volume=1):
        '''human can hear frequencies from 20 Hz to 20.000 Hz'''
        store_attr()
        self.t = np.linspace(0.,seconds, int(np.round(rate*seconds)), dtype=np.float32)
        self.data = volume*np.sin(np.pi*2*freq*self.t)
    
    def save(self,fname): wf.write(fname, self.rate, self.data)
    
    def show(self, n_period=5, ax=None):
        ax = ifnone(ax, plt.subplots()[1])
        d = self.data if n_period is None else self.data[:n_period*self.rate//self.freq]
        ax.plot(d)
    
    def __neg__(self): 
        res = copy(self)
        res.data = -self.data
        return res
    
    def __add__(self, other):
        res = copy(self)
        if isinstance(other, Wave):
            assert self.rate == other.rate
            res.data = self.data + other.data
        else: res.data += other
        return res
    
    def __sub__(self, other): return self + (-other)


class Pulse(Wave):
    def __init__(self, freq, seconds=1, rate=44_100, max_volume=1, ratio=2):
        super().__init__(freq, seconds, rate)
        volume = st.norm.pdf(self.t, self.t.mean(), self.t.std()/ratio).astype(np.float32)
        self.data = volume/volume.max()*max_volume*np.sin(np.pi*2*freq*self.t)

# %% ../nbs/01_waves.ipynb 17
class Sound:
    def __init__(self): pass
    
        
