# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/hits_01_data_prep.ipynb.

# %% auto 0
__all__ = ['load_stream', 'split_into_frames', 'split_audio', 'generate_with_stones', 'merge_items', 'TfmDataset',
           'plot_spectrogram']

# %% ../../nbs/hits_01_data_prep.ipynb 3
import requests
import librosa, matplotlib.pyplot as plt, numpy as np
from fastcore.all import noop, L

# %% ../../nbs/hits_01_data_prep.ipynb 5
def load_stream(file = '../data/stream.mp3'):
    stream_url = 'https://radio.kotah.ru/soundcheck'
    r = requests.get(stream_url, stream=True)
    with open(file, 'wb') as f:
        try:
            for block in r.iter_content(4096):
                f.write(block)
        except KeyboardInterrupt:
            pass

# %% ../../nbs/hits_01_data_prep.ipynb 8
def split_into_frames(arr, f_size, stride):
    n_frames = (arr.shape[0] - f_size)//stride + 1
    strides = (stride*arr.dtype.itemsize, arr.dtype.itemsize)
    return np.lib.stride_tricks.as_strided(arr, shape=(n_frames, f_size), strides=strides).copy()

def split_audio(sound, sr, f_size=1, stride=1):
    return split_into_frames(sound, int(sr*f_size), int(sr*stride))

# %% ../../nbs/hits_01_data_prep.ipynb 17
def generate_with_stones(frames, stones, n=2000):
    stone_samples = stones[np.random.choice(stones.shape[0], n)]
    fr_samples = frames[np.random.choice(frames.shape[0], n)]
    p = np.random.rand(n,1).astype(frames.dtype)*.5
    return (1-p)*stone_samples+p*fr_samples

# %% ../../nbs/hits_01_data_prep.ipynb 22
def merge_items(xs, ys):
    return [(x,y) for x,y in zip(xs,ys)]

class TfmDataset:
    def __init__(self, items, x_tfms=None, y_tfms=None) -> None:
        self.items = items
        self.x_tfms = [noop] if x_tfms is None else x_tfms
        self.y_tfms = [noop] if y_tfms is None else y_tfms
    
    def __len__(self): return len(self.items)
    
    def __getitem__(self, idx):
        x, y = self.items[idx]
        for t in self.x_tfms: x=t(x)
        for t in self.y_tfms: y=t(y)
        return x,y

# %% ../../nbs/hits_01_data_prep.ipynb 23
def plot_spectrogram(specgram, title=None, ylabel="freq_bin", ax=None):
    if ax is None:
        _, ax = plt.subplots(1, 1)
    if title is not None:
        ax.set_title(title)
    ax.set_ylabel(ylabel)
    ax.imshow(librosa.power_to_db(specgram), origin="lower", aspect="auto", interpolation="nearest")
