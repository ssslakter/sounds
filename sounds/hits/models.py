# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/hits_02_model.ipynb.

# %% auto 0
__all__ = ['conv1d', 'ConvModel', 'AudioModel']

# %% ../../nbs/hits_02_model.ipynb 2
from typing import Mapping
import torch, torch.nn as nn, torch.optim as optim
import torch.nn.functional as F
import math
import fastcore.all as fc
from fastprogress import master_bar, progress_bar

# %% ../../nbs/hits_02_model.ipynb 11
def conv1d(n_in, n_out, k_size=3, stride=2, act=nn.ReLU(), p=None, norm=False):
    res = [nn.Conv1d(n_in, n_out, k_size, stride, padding=2, bias=False)]
    if p is not None: res.append(nn.Dropout(p))
    if norm: res.append(nn.GroupNorm(1,n_out))
    if act is not None: res.append(act)
    return nn.Sequential(*res)

# %% ../../nbs/hits_02_model.ipynb 12
class ConvModel(nn.Module):
    # Feature extractor based on wav2vec http://arxiv.org/abs/1904.05862
    
    def __init__(
        self,
        conv_k_sizes=(10,8,8,4,4),
        conv_dims = (32,32,32,32,32),
        dropout=0.7,
        log_compression=True,
        skip_connections=True,
        residual_scale=0.5,
        act=nn.PReLU(),
    ):
        super().__init__()

        in_d = 1
        self.conv_layers = nn.ModuleList()
        for dim, k in zip(conv_dims,conv_k_sizes):
            self.conv_layers.append(conv1d(in_d, dim, k, k//2, act, p=dropout, norm=True))
            in_d = dim

        self.log_compression = log_compression
        self.skip_connections = skip_connections
        self.residual_scale = math.sqrt(residual_scale)

    def forward(self, x: torch.Tensor):
        x = x.unsqueeze(1)
        for conv in self.conv_layers:
            residual = x
            x = conv(x)
            if self.skip_connections and x.size(1) == residual.size(1):
                tsz = x.size(2)
                r_tsz = residual.size(2)
                residual = residual[..., :: r_tsz // tsz][..., :tsz]
                x = (x + residual) * self.residual_scale

        if self.log_compression: x = x.abs().log1p()
        return x

# %% ../../nbs/hits_02_model.ipynb 13
class AudioModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = nn.Sequential(ConvModel(),
                  nn.Flatten(),
                  nn.ReLU(), 
                  nn.Dropout(), 
                  nn.Linear(2432, 1))
    def forward(self, x):
        return self.model(x).squeeze(-1)
